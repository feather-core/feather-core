/*
 * Copyright 2019 Feather Core
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.feathercore.protocol.minecraft.packet.login.server;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.FieldDefaults;
import org.feathercore.protocol.Buffer;
import org.feathercore.protocol.minecraft.packet.MinecraftPacket;
import org.jetbrains.annotations.NotNull;

/**
 * Used to implement a custom handshaking flow together with Login Plugin
 * Response.
 *
 * Unlike plugin messages in "play" mode, these messages follow a
 * lock-step request/response scheme, where the client is expected to
 * respond to a request indicating whether it understood. The notchian
 * client always responds that it hasn't understood, and sends an empty
 * payload.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
@FieldDefaults(level = AccessLevel.PROTECTED)
public class LoginPacketServerLoginPluginRequest implements MinecraftPacket {

    public static final int ID = 0x04;

    /**
     * Generated by the server, should be unique to the connection
     */
    int messageId;

    /**
     * Name of the plugin channel used to send the data
     */
    String channel;

    /**
     * Any data, depending on the channel
     *
     * @apiNote The length of this array must be inferred from the packet length
     */
    byte[] data;

    @Override
    public void write(@NotNull final Buffer buffer) {
        buffer.writeVarInt(messageId);
        buffer.writeString(channel);
        // FIXME: 18.04.2019 because `The length of this array must be inferred from the packet length.`
        buffer.writeBytes(data);
    }

    @Override
    public int getId() {
        return ID;
    }
}
